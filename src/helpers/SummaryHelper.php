<?php
/**
 * 要約ヘルパー
 *
 * テキストの要約や補正に関するヘルパー関数
 */

/**
 * 文章を補正して要約する（実際の処理）
 *
 * @param string $text 補正・要約するテキスト
 * @param string $language 言語コード（例: 'ja', 'en'）
 * @param string|null $apiKey Google Gemini API キー
 * @param string|null $model Gemini モデル名
 * @param string $format 要約フォーマット（'standard', 'bullet', 'headline', 'qa', 'executive'）
 * @return array 結果（成功時は ['success' => true, 'corrected_text' => '補正テキスト', 'summary' => '要約テキスト']、失敗時は ['success' => false, 'error' => 'エラーメッセージ']）
 */
function correctAndSummarizeTextMain(string $text, string $language = 'ja', string $apiKey = null, string $model = null, $format = 'standard'): array
{
  // APIキーのチェック
  if (empty($apiKey)) {
    return [
        'success' => false,
        'error' => 'APIキーが設定されていません'
    ];
  }

  // モデル名の取得（指定がなければ環境変数から、それもなければデフォルト値）
  $model = $model ?: (getenv('GEMINI_MODEL') ?: 'gemini-1.5-pro');

  // グローバル変数としてAPIキーとモデルを設定（テキスト分割処理用）
  global $apiKey, $model;

  // テキストの長さをチェック
  if (empty($text) || strlen($text) < 50) {
    return [
        'success' => false,
        'error' => 'テキストが短すぎるため処理できません'
    ];
  }

  // テキストが長すぎる場合は重要な部分を抽出
  $maxInputLength = 30000; // モデルに依存する適切な値に設定
  if (mb_strlen($text) > $maxInputLength) {
    $text = extractImportantParts($text, $maxInputLength);
  }

  // テキストが分割処理必要かどうかをチェック
  $maxChunkSize = 4000; // チャンクサイズの設定
  if (mb_strlen($text) > $maxChunkSize) {
    // 処理関数を定義（クロージャ）
    $processFunction = function($chunkText, $chunkLanguage, $chunkApiKey, $chunkModel, $chunkFormat) {
      return _processSingleChunk($chunkText, $chunkLanguage, $chunkApiKey, $chunkModel, $chunkFormat);
    };

    // テキスト分割処理を実行
    return processLongText($text, $maxChunkSize, $processFunction, [$language, $apiKey, $model, $format]);
  } else {
    // 通常の処理
    return _processSingleChunk($text, $language, $apiKey, $model, $format);
  }
}

/**
 * 単一チャンクの文章を補正して要約する（内部関数）
 */
function _processSingleChunk($text, $language, $apiKey, $model, $format) {
  // フォーマット情報の取得
  $formats = getSummaryFormats();
  $formatInfo = $formats[$format] ?? $formats['standard']; // 不明なフォーマットの場合はデフォルト
  $formatSuffix = $formatInfo['prompt_suffix'];

  // 言語に応じたプロンプトの準備
  $prompts = [
      'ja' => "以下は音声認識によって生成された文字起こしテキストです。このテキストには認識エラーや不自然な表現、句読点の問題などがある可能性があります。

まず、このテキストを自然な日本語に補正してください。補正の際は、明らかな認識ミスを修正し、文法的に正しく、読みやすい文章にしてください。
次に、補正したテキストの要約を作成してください。{$formatSuffix}

補正と要約の両方をJSON形式ではなく、以下のフォーマットで出力してください：

==== 補正テキスト ====
（補正された文章をここに記載）

==== 要約 ====
（要約をここに記載）

元のテキスト:
{$text}",

      'en' => "Below is a transcription text generated by speech recognition. This text may contain recognition errors, unnatural expressions, punctuation issues, etc.

First, please correct this text into natural English. When making corrections, fix obvious recognition errors, make it grammatically correct, and ensure it's easy to read.
Next, create a summary of the corrected text. {$formatSuffix}

Please provide both the correction and summary in the following format, NOT in JSON:

==== CORRECTED TEXT ====
(corrected text goes here)

==== SUMMARY ====
(summary goes here)

Original text:
{$text}"
  ];

  // デフォルトのプロンプト
  $prompt = $prompts[$language] ?? $prompts['en'];

  try {
    // Gemini APIを呼び出し
    $result = callGeminiAPI($prompt, $apiKey, $model);
    $responseText = $result['candidates'][0]['content']['parts'][0]['text'];

    // レスポンスから補正テキストと要約を抽出
    $extracted = extractCorrectionAndSummary($responseText);

    return [
        'success' => true,
        'corrected_text' => $extracted['corrected_text'],
        'summary' => $extracted['summary']
    ];
  } catch (Exception $e) {
    error_log('Gemini API エラー: ' . $e->getMessage());
    return [
        'success' => false,
        'error' => $e->getMessage()
    ];
  }
}

/**
 * 既に補正済みのテキストを要約する関数（実際の処理）
 *
 * @param string $text 要約するテキスト（すでに補正済みの文章）
 * @param string $language 言語コード（例: 'ja', 'en'）
 * @param string|null $apiKey Google Gemini API キー
 * @param string|null $model Gemini モデル名
 * @param string $format 要約フォーマット（'standard', 'bullet', 'headline', 'qa', 'executive', 'meeting'）
 * @return array 結果（成功時は ['success' => true, 'summary' => '要約テキスト']、失敗時は ['success' => false, 'error' => 'エラーメッセージ']）
 */
function summarizeOnlyTextMain(string $text, string $language = 'ja', string $apiKey = null, string $model = null, $format = 'standard'): array
{
  // APIキーのチェック
  if (empty($apiKey)) {
    return [
        'success' => false,
        'error' => 'APIキーが設定されていません'
    ];
  }

  // モデル名の取得（指定がなければ環境変数から、それもなければデフォルト値）
  $model = $model ?: (getenv('GEMINI_MODEL') ?: 'gemini-1.5-pro');

  // グローバル変数としてAPIキーとモデルを設定（テキスト分割処理用）
  global $apiKey, $model;

  // テキストの長さをチェック
  if (empty($text) || strlen($text) < 50) {
    return [
        'success' => false,
        'error' => 'テキストが短すぎるため要約できません'
    ];
  }

  // フォーマット情報の取得
  $formats = getSummaryFormats();
  $formatInfo = $formats[$format] ?? $formats['standard']; // 不明なフォーマットの場合はデフォルト
  $formatSuffix = $formatInfo['prompt_suffix'];

  // テキストが長すぎる場合は重要な部分を抽出
  $maxInputLength = 30000; // モデルに依存する適切な値に設定
  if (mb_strlen($text) > $maxInputLength) {
    $text = extractImportantParts($text, $maxInputLength);
  }

  // テキストが分割処理必要かどうかをチェック
  $maxChunkSize = 4000; // チャンクサイズの設定
  if (mb_strlen($text) > $maxChunkSize) {
    // 処理関数を定義（クロージャ）
    $processFunction = function($chunkText, $chunkLanguage, $chunkApiKey, $chunkModel, $chunkFormat) {
      return _summarizeOnlySingleChunk($chunkText, $chunkLanguage, $chunkApiKey, $chunkModel, $chunkFormat);
    };

    // テキスト分割処理を実行
    return processLongText($text, $maxChunkSize, $processFunction, [$language, $apiKey, $model, $format]);
  } else {
    // 通常の処理
    return _summarizeOnlySingleChunk($text, $language, $apiKey, $model, $format);
  }
}

/**
 * 単一チャンクの文章のみを要約する（内部関数）
 */
function _summarizeOnlySingleChunk($text, $language, $apiKey, $model, $format) {
  try {
    // フォーマット情報の取得
    $formats = getSummaryFormats();
    $formatInfo = $formats[$format] ?? $formats['standard']; // 不明なフォーマットの場合はデフォルト
    $formatSuffix = $formatInfo['prompt_suffix'];

    // 言語に応じたプロンプトの準備
    $prompts = [
        'ja' => "以下のテキストを要約してください。{$formatSuffix}\n\nJSONではなく、通常のテキスト形式で出力してください。\n\n対象テキスト:\n{$text}",
        'en' => "Summarize the following text. {$formatSuffix}\n\nPlease output as normal text, not in JSON format.\n\nTarget text:\n{$text}",
    ];

    // デフォルトのプロンプト
    $prompt = $prompts[$language] ?? $prompts['en'];

    // Gemini APIを呼び出し
    $result = callGeminiAPI($prompt, $apiKey, $model);
    $summary = $result['candidates'][0]['content']['parts'][0]['text'];

    // JSON形式で返ってきた場合は抽出を試みる
    if (strpos($summary, '{') === 0 && strpos($summary, '}') !== false) {
      $jsonData = json_decode($summary, true);
      if (json_last_error() === JSON_ERROR_NONE && isset($jsonData['summary'])) {
        $summary = $jsonData['summary'];
      }
    }

    return [
        'success' => true,
        'summary' => $summary
    ];
  } catch (Exception $e) {
    error_log('Gemini API エラー: ' . $e->getMessage());
    return [
        'success' => false,
        'error' => $e->getMessage()
    ];
  }
}

/**
 * 文章を要約する（実際の処理）
 *
 * @param string $text 要約するテキスト
 * @param string $language 言語コード（例: 'ja', 'en'）
 * @param string|null $apiKey Google Gemini API キー
 * @param string|null $model Gemini モデル名
 * @return array 結果（成功時は ['success' => true, 'summary' => '要約テキスト']、失敗時は ['success' => false, 'error' => 'エラーメッセージ']）
 */
function summarizeTextMain(string $text, string $language = 'ja', string $apiKey = null, string $model = null) {
  // APIキーのチェック
  if (empty($apiKey)) {
    return [
        'success' => false,
        'error' => 'APIキーが設定されていません'
    ];
  }

  // モデル名の取得（指定がなければ環境変数から、それもなければデフォルト値）
  $model = $model ?: (getenv('GEMINI_MODEL') ?: 'gemini-1.5-pro');

  // グローバル変数としてAPIキーとモデルを設定（テキスト分割処理用）
  global $apiKey, $model;

  // テキストの長さをチェック
  if (empty($text) || strlen($text) < 50) {
    return [
        'success' => false,
        'error' => 'テキストが短すぎるため要約できません'
    ];
  }

  // テキストが長すぎる場合は重要な部分を抽出
  $maxInputLength = 30000; // モデルに依存する適切な値に設定
  if (mb_strlen($text) > $maxInputLength) {
    $text = extractImportantParts($text, $maxInputLength);
  }

  // テキストが分割処理必要かどうかをチェック
  $maxChunkSize = 4000; // チャンクサイズの設定
  if (mb_strlen($text) > $maxChunkSize) {
    // 処理関数を定義（クロージャ）
    $processFunction = function($chunkText, $chunkLanguage, $chunkApiKey, $chunkModel) {
      return _summarizeSingleChunk($chunkText, $chunkLanguage, $chunkApiKey, $chunkModel);
    };

    // テキスト分割処理を実行
    return processLongText($text, $maxChunkSize, $processFunction, [$language, $apiKey, $model]);
  } else {
    // 通常の処理
    return _summarizeSingleChunk($text, $language, $apiKey, $model);
  }
}

/**
 * 単一チャンクの文章を要約する（内部関数）
 */
function _summarizeSingleChunk($text, $language, $apiKey, $model) {
  try {
    // 言語に応じたプロンプトの準備
    $prompts = [
        'ja' => "以下のテキストを要約してください。簡潔で重要なポイントを含む要約を作成してください。返答はJSON形式ではなく、通常のテキスト形式で出力してください。\n\n{$text}",
        'en' => "Summarize the following text. Create a concise summary that includes the important points. Please output as normal text, not in JSON format.\n\n{$text}",
    ];

    // デフォルトのプロンプト
    $prompt = $prompts[$language] ?? $prompts['en'];

    // Gemini APIを呼び出し
    $result = callGeminiAPI($prompt, $apiKey, $model);
    $summary = $result['candidates'][0]['content']['parts'][0]['text'];

    return [
        'success' => true,
        'summary' => $summary
    ];
  } catch (Exception $e) {
    error_log('Gemini API エラー: ' . $e->getMessage());
    return [
        'success' => false,
        'error' => $e->getMessage()
    ];
  }
}