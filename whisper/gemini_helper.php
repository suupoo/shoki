<?php
/**
 * Gemini API ヘルパー
 *
 * Google Gemini APIを使用して文章の補正と要約を生成するためのヘルパー関数
 */

/**
 * 文章を補正して要約する
 *
 * @param string $text 補正・要約するテキスト
 * @param string $language 言語コード（例: 'ja', 'en'）
 * @param string|null $apiKey Google Gemini API キー
 * @param string|null $model Gemini モデル名
 * @param string $format 要約フォーマット（'standard', 'bullet', 'headline', 'qa', 'executive'）
 * @return array 結果（成功時は ['success' => true, 'corrected_text' => '補正テキスト', 'summary' => '要約テキスト']、失敗時は ['success' => false, 'error' => 'エラーメッセージ']）
 */
function correctAndSummarizeText(string $text, string $language = 'ja', string $apiKey = null, string $model = null, $format = 'standard'): array
{
  // APIキーのチェック
  if (empty($apiKey)) {
    return [
        'success' => false,
        'error' => 'APIキーが設定されていません'
    ];
  }

  // モデル名の取得（指定がなければ環境変数から、それもなければデフォルト値）
  $model = $model ?: (getenv('GEMINI_MODEL') ?: 'gemini-1.5-pro');

  // フォーマット情報の取得
  $formats = getAvailableSummaryFormats();
  $formatInfo = $formats[$format] ?? $formats['standard']; // 不明なフォーマットの場合はデフォルト
  $formatSuffix = $formatInfo['prompt_suffix'];

  // テキストの長さをチェック
  if (empty($text) || strlen($text) < 50) {
    return [
        'success' => false,
        'error' => 'テキストが短すぎるため処理できません'
    ];
  }

  // 言語に応じたプロンプトの準備
  $prompts = [
      'ja' => "以下は音声認識によって生成された文字起こしテキストです。このテキストには認識エラーや不自然な表現、句読点の問題などがある可能性があります。

まず、このテキストを自然な日本語に補正してください。補正の際は、明らかな認識ミスを修正し、文法的に正しく、読みやすい文章にしてください。
次に、補正したテキストの要約を作成してください。{$formatSuffix}

補正と要約の両方をJSON形式で返してください。以下のフォーマットを使用してください：
{
  \"corrected_text\": \"補正された文章をここに記載\",
  \"summary\": \"要約をここに記載\"
}

元のテキスト:
{$text}",

      'en' => "Below is a transcription text generated by speech recognition. This text may contain recognition errors, unnatural expressions, punctuation issues, etc.

First, please correct this text into natural English. When making corrections, fix obvious recognition errors, make it grammatically correct, and ensure it's easy to read.
Next, create a summary of the corrected text. {$formatSuffix}

Please return both the correction and summary in JSON format. Use the following format:
{
  \"corrected_text\": \"corrected text goes here\",
  \"summary\": \"summary goes here\"
}

Original text:
{$text}"
  ];


  // デフォルトのプロンプト
  $prompt = $prompts[$language] ?? $prompts['en'];

  // Gemini APIエンドポイント
  $url = "https://generativelanguage.googleapis.com/v1beta/models/{$model}:generateContent?key=" . $apiKey;

  // APIリクエストデータ
  $data = [
      'contents' => [
          [
              'parts' => [
                  [
                      'text' => $prompt
                  ]
              ]
          ]
      ],
      'generationConfig' => [
          'temperature' => 0.2,
          'topK' => 40,
          'topP' => 0.95,
          'maxOutputTokens' => 1024,
          'responseMimeType' => 'application/json',
      ]
  ];

  // cURLセッションの初期化
  $ch = curl_init($url);

  // cURLオプションの設定
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
  curl_setopt($ch, CURLOPT_POST, true);
  curl_setopt($ch, CURLOPT_HTTPHEADER, [
      'Content-Type: application/json'
  ]);
  curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($data));
  curl_setopt($ch, CURLOPT_TIMEOUT, 30);

  // APIリクエストの実行
  $response = curl_exec($ch);
  $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);
  $error = curl_error($ch);

  // cURLセッションの終了
  curl_close($ch);

  // エラーチェック
  if (!empty($error)) {
    return [
        'success' => false,
        'error' => 'API通信エラー: ' . $error
    ];
  }

  if ($httpCode != 200) {
    return [
        'success' => false,
        'error' => 'APIレスポンスエラー: HTTPコード ' . $httpCode
    ];
  }

  // レスポンスのデコード
  $result = json_decode($response, true);

  // レスポンス構造の確認
  if (!isset($result['candidates'][0]['content']['parts'][0]['text'])) {
    return [
        'success' => false,
        'error' => 'APIレスポンス形式エラー'
    ];
  }

  // レスポンステキストの取得
  $responseText = $result['candidates'][0]['content']['parts'][0]['text'];

  // JSON部分の抽出
  if (preg_match('/\{.*\}/s', $responseText, $matches)) {
    $jsonText = $matches[0];
    $jsonData = json_decode($jsonText, true);

    if (json_last_error() !== JSON_ERROR_NONE) {
      return [
          'success' => false,
          'error' => 'JSONパースエラー: ' . json_last_error_msg()
      ];
    }

    if (!isset($jsonData['corrected_text']) || !isset($jsonData['summary'])) {
      return [
          'success' => false,
          'error' => 'レスポンスに必要なフィールドがありません'
      ];
    }

    return [
        'success' => true,
        'corrected_text' => $jsonData['corrected_text'],
        'summary' => $jsonData['summary']
    ];
  } else {
    // JSONが見つからない場合、テキスト全体から抽出を試みる
    $lines = explode("\n", $responseText);
    $correctedText = '';
    $summary = '';
    $inCorrected = false;
    $inSummary = false;

    foreach ($lines as $line) {
      if (strpos($line, 'corrected_text') !== false) {
        $inCorrected = true;
        $inSummary = false;
        continue;
      } else if (strpos($line, 'summary') !== false) {
        $inCorrected = false;
        $inSummary = true;
        continue;
      }

      if ($inCorrected) {
        $correctedText .= $line . "\n";
      } else if ($inSummary) {
        $summary .= $line . "\n";
      }
    }

    // 引用符や余分な文字を削除
    $correctedText = trim(str_replace(['"', "'", ','], '', $correctedText));
    $summary = trim(str_replace(['"', "'", '}'], '', $summary));

    if (empty($correctedText) || empty($summary)) {
      return [
          'success' => false,
          'error' => 'レスポンスから必要な情報を抽出できませんでした',
          'raw_response' => $responseText
      ];
    }

    return [
        'success' => true,
        'corrected_text' => $correctedText,
        'summary' => $summary
    ];
  }
}


/**
 * 文章を補正して要約する
 *
 * @param string $text 補正・要約するテキスト
 * @param string $language 言語コード（例: 'ja', 'en'）
 * @param string|null $apiKey Google Gemini API キー
 * @param string|null $model Gemini モデル名
 * @return array 結果（成功時は ['success' => true, 'corrected_text' => '補正テキスト', 'summary' => '要約テキスト']、失敗時は ['success' => false, 'error' => 'エラーメッセージ']）
 */
function summarizeText(string $text, string $language = 'ja', string $apiKey = null, string $model = null) {
  // APIキーのチェック
  if (empty($apiKey)) {
    return [
        'success' => false,
        'error' => 'APIキーが設定されていません'
    ];
  }

  // モデル名の取得（指定がなければ環境変数から、それもなければデフォルト値）
  $model = $model ?: (getenv('GEMINI_MODEL') ?: 'gemini-1.5-pro');

  // テキストの長さをチェック
  if (empty($text) || strlen($text) < 50) {
    return [
        'success' => false,
        'error' => 'テキストが短すぎるため要約できません'
    ];
  }

  // 言語に応じたプロンプトの準備
  $prompts = [
      'ja' => "以下のテキストを要約してください。簡潔で重要なポイントを含む要約を作成してください。\n\n{$text}",
      'en' => "Summarize the following text. Create a concise summary that includes the important points.\n\n{$text}",
  ];

  // デフォルトのプロンプト
  $prompt = $prompts[$language] ?? $prompts['en'];

  // Gemini APIエンドポイント
  $url = 'https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-pro:generateContent?key=' . $apiKey;

  // APIリクエストデータ
  $data = [
      'contents' => [
          [
              'parts' => [
                  [
                      'text' => $prompt
                  ]
              ]
          ]
      ],
      'generationConfig' => [
          'temperature' => 0.2,
          'topK' => 40,
          'topP' => 0.95,
          'maxOutputTokens' => 1024,
      ]
  ];

  // cURLセッションの初期化
  $ch = curl_init($url);

  // cURLオプションの設定
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
  curl_setopt($ch, CURLOPT_POST, true);
  curl_setopt($ch, CURLOPT_HTTPHEADER, [
      'Content-Type: application/json'
  ]);
  curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($data));
  curl_setopt($ch, CURLOPT_TIMEOUT, 30);

  // APIリクエストの実行
  $response = curl_exec($ch);
  $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);
  $error = curl_error($ch);

  // cURLセッションの終了
  curl_close($ch);

  // エラーチェック
  if (!empty($error)) {
    return [
        'success' => false,
        'error' => 'API通信エラー: ' . $error
    ];
  }

  if ($httpCode != 200) {
    return [
        'success' => false,
        'error' => 'APIレスポンスエラー: HTTPコード ' . $httpCode
    ];
  }

  // レスポンスのデコード
  $result = json_decode($response, true);

  // レスポンス構造の確認
  if (!isset($result['candidates'][0]['content']['parts'][0]['text'])) {
    return [
        'success' => false,
        'error' => 'APIレスポンス形式エラー'
    ];
  }

  // 要約テキストの取得
  $summary = $result['candidates'][0]['content']['parts'][0]['text'];

  return [
      'success' => true,
      'summary' => $summary
  ];
}


/**
 * 利用可能な要約フォーマットを定義
 * @return array
 */
function getAvailableSummaryFormats(): array
{
  return [
      'standard' => [
          'name' => '標準',
          'description' => '通常の段落形式の要約',
          'prompt_suffix' => '文章を要約して段落形式で出力してください。'
      ],
      'bullet' => [
          'name' => '箇条書き',
          'description' => '要点を箇条書きでまとめた要約',
          'prompt_suffix' => '文章を要約して、重要なポイントを箇条書き（- で始まる行）形式で出力してください。'
      ],
      'headline' => [
          'name' => '見出し形式',
          'description' => '見出しと説明文の形式でまとめた要約',
          'prompt_suffix' => '文章を要約して、主要な話題を「## 見出し」形式で示し、各見出しの下に簡潔な説明を追加してください。'
      ],
      'qa' => [
          'name' => 'Q&A形式',
          'description' => '質問と回答の形式でまとめた要約',
          'prompt_suffix' => '文章の内容に基づいて、重要なポイントを質問と回答の形式でまとめてください。各質問は「Q:」で始め、回答は「A:」で始めてください。'
      ],
      'executive' => [
          'name' => 'エグゼクティブサマリー',
          'description' => '意思決定者向けの簡潔な要約',
          'prompt_suffix' => 'ビジネス文書のエグゼクティブサマリーとして、目的、結論、推奨事項を含む簡潔な要約を作成してください。'
      ],
     'meeting' => [
         'name' => '会議議事録',
         'description' => '会議の開催日、参加者、内容、タスクを含む議事録形式',
         'prompt_suffix' => '以下の会議の文字起こしから、適切な会議議事録をMarkdown形式で作成してください。JSONではなく、以下のようなMarkdown形式で出力してください：
## 開催日
文中から特定できる会議日時を記載してください。特定できない場合は「記載なし」としてください。

## 参加メンバー
- メンバー1
- メンバー2（役職）

## 内容まとめ
会議で議論された主な内容の要約を記載してください。

### 主な議題と結論
議題と結論の説明

### 重要な決定事項
決定事項の説明

### 議論されたオプションや選択肢
オプションや選択肢の説明

## タスク
- [ ] タスク1 @担当者（期限）
- [ ] タスク2 @担当者（期限）

以上を、整理された議事録形式で出力してください。JSONのような構造化データではなく、人間が読みやすいMarkdown形式にしてください。'
     ],
  ];
}