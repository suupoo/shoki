<?php
/**
 * Gemini API ヘルパー
 *
 * Google Gemini APIを使用して文章の補正と要約を生成するためのヘルパー関数
 */

/**
 * 文章を補正して要約する
 *
 * @param string $text 補正・要約するテキスト
 * @param string $language 言語コード（例: 'ja', 'en'）
 * @param string|null $apiKey Google Gemini API キー
 * @param string|null $model Gemini モデル名
 * @return array 結果（成功時は ['success' => true, 'corrected_text' => '補正テキスト', 'summary' => '要約テキスト']、失敗時は ['success' => false, 'error' => 'エラーメッセージ']）
 */
function correctAndSummarizeText(string $text, string $language = 'ja', string $apiKey = null, string $model = null) {
  // APIキーのチェック
  if (empty($apiKey)) {
    return [
        'success' => false,
        'error' => 'APIキーが設定されていません'
    ];
  }

  // モデル名の取得（指定がなければ環境変数から、それもなければデフォルト値）
  $model = $model ?: (getenv('GEMINI_MODEL') ?: 'gemini-1.5-pro');

  // テキストの長さをチェック
  if (empty($text) || strlen($text) < 50) {
    return [
        'success' => false,
        'error' => 'テキストが短すぎるため処理できません'
    ];
  }

  // 言語に応じたプロンプトの準備
  $prompts = [
      'ja' => "以下は音声認識によって生成された文字起こしテキストです。このテキストには認識エラーや不自然な表現、句読点の問題などがある可能性があります。

まず、このテキストを自然な日本語に補正してください。補正の際は、明らかな認識ミスを修正し、文法的に正しく、読みやすい文章にしてください。
次に、補正したテキストの要約を作成してください。重要なポイントを含む簡潔な要約を作成してください。

補正と要約の両方をJSON形式で返してください。以下のフォーマットを使用してください：
{
  \"corrected_text\": \"補正された文章をここに記載\",
  \"summary\": \"要約をここに記載\"
}

元のテキスト:
{$text}",

      'en' => "Below is a transcription text generated by speech recognition. This text may contain recognition errors, unnatural expressions, punctuation issues, etc.

First, please correct this text into natural English. When making corrections, fix obvious recognition errors, make it grammatically correct, and ensure it's easy to read.
Next, create a summary of the corrected text. Create a concise summary that includes the important points.

Please return both the correction and summary in JSON format. Use the following format:
{
  \"corrected_text\": \"corrected text goes here\",
  \"summary\": \"summary goes here\"
}

Original text:
{$text}"
  ];

  // デフォルトのプロンプト
  $prompt = $prompts[$language] ?? $prompts['en'];

  // Gemini APIエンドポイント
  $url = "https://generativelanguage.googleapis.com/v1beta/models/{$model}:generateContent?key=" . $apiKey;

  // APIリクエストデータ
  $data = [
      'contents' => [
          [
              'parts' => [
                  [
                      'text' => $prompt
                  ]
              ]
          ]
      ],
      'generationConfig' => [
          'temperature' => 0.2,
          'topK' => 40,
          'topP' => 0.95,
          'maxOutputTokens' => 1024,
          'responseMimeType' => 'application/json',
      ]
  ];

  // cURLセッションの初期化
  $ch = curl_init($url);

  // cURLオプションの設定
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
  curl_setopt($ch, CURLOPT_POST, true);
  curl_setopt($ch, CURLOPT_HTTPHEADER, [
      'Content-Type: application/json'
  ]);
  curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($data));
  curl_setopt($ch, CURLOPT_TIMEOUT, 30);

  // APIリクエストの実行
  $response = curl_exec($ch);
  $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);
  $error = curl_error($ch);

  // cURLセッションの終了
  curl_close($ch);

  // エラーチェック
  if (!empty($error)) {
    return [
        'success' => false,
        'error' => 'API通信エラー: ' . $error
    ];
  }

  if ($httpCode != 200) {
    return [
        'success' => false,
        'error' => 'APIレスポンスエラー: HTTPコード ' . $httpCode
    ];
  }

  // レスポンスのデコード
  $result = json_decode($response, true);

  // レスポンス構造の確認
  if (!isset($result['candidates'][0]['content']['parts'][0]['text'])) {
    return [
        'success' => false,
        'error' => 'APIレスポンス形式エラー'
    ];
  }

  // レスポンステキストの取得
  $responseText = $result['candidates'][0]['content']['parts'][0]['text'];

  // JSON部分の抽出
  if (preg_match('/\{.*\}/s', $responseText, $matches)) {
    $jsonText = $matches[0];
    $jsonData = json_decode($jsonText, true);

    if (json_last_error() !== JSON_ERROR_NONE) {
      return [
          'success' => false,
          'error' => 'JSONパースエラー: ' . json_last_error_msg()
      ];
    }

    if (!isset($jsonData['corrected_text']) || !isset($jsonData['summary'])) {
      return [
          'success' => false,
          'error' => 'レスポンスに必要なフィールドがありません'
      ];
    }

    return [
        'success' => true,
        'corrected_text' => $jsonData['corrected_text'],
        'summary' => $jsonData['summary']
    ];
  } else {
    // JSONが見つからない場合、テキスト全体から抽出を試みる
    $lines = explode("\n", $responseText);
    $correctedText = '';
    $summary = '';
    $inCorrected = false;
    $inSummary = false;

    foreach ($lines as $line) {
      if (strpos($line, 'corrected_text') !== false) {
        $inCorrected = true;
        $inSummary = false;
        continue;
      } else if (strpos($line, 'summary') !== false) {
        $inCorrected = false;
        $inSummary = true;
        continue;
      }

      if ($inCorrected) {
        $correctedText .= $line . "\n";
      } else if ($inSummary) {
        $summary .= $line . "\n";
      }
    }

    // 引用符や余分な文字を削除
    $correctedText = trim(str_replace(['"', "'", ','], '', $correctedText));
    $summary = trim(str_replace(['"', "'", '}'], '', $summary));

    if (empty($correctedText) || empty($summary)) {
      return [
          'success' => false,
          'error' => 'レスポンスから必要な情報を抽出できませんでした',
          'raw_response' => $responseText
      ];
    }

    return [
        'success' => true,
        'corrected_text' => $correctedText,
        'summary' => $summary
    ];
  }
}


/**
 * 文章を補正して要約する
 *
 * @param string $text 補正・要約するテキスト
 * @param string $language 言語コード（例: 'ja', 'en'）
 * @param string|null $apiKey Google Gemini API キー
 * @param string|null $model Gemini モデル名
 * @return array 結果（成功時は ['success' => true, 'corrected_text' => '補正テキスト', 'summary' => '要約テキスト']、失敗時は ['success' => false, 'error' => 'エラーメッセージ']）
 */
function summarizeText(string $text, string $language = 'ja', string $apiKey = null, string $model = null) {
  // APIキーのチェック
  if (empty($apiKey)) {
    return [
        'success' => false,
        'error' => 'APIキーが設定されていません'
    ];
  }

  // モデル名の取得（指定がなければ環境変数から、それもなければデフォルト値）
  $model = $model ?: (getenv('GEMINI_MODEL') ?: 'gemini-1.5-pro');

  // テキストの長さをチェック
  if (empty($text) || strlen($text) < 50) {
    return [
        'success' => false,
        'error' => 'テキストが短すぎるため要約できません'
    ];
  }

  // 言語に応じたプロンプトの準備
  $prompts = [
      'ja' => "以下のテキストを要約してください。簡潔で重要なポイントを含む要約を作成してください。\n\n{$text}",
      'en' => "Summarize the following text. Create a concise summary that includes the important points.\n\n{$text}",
  ];

  // デフォルトのプロンプト
  $prompt = $prompts[$language] ?? $prompts['en'];

  // Gemini APIエンドポイント
  $url = 'https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-pro:generateContent?key=' . $apiKey;

  // APIリクエストデータ
  $data = [
      'contents' => [
          [
              'parts' => [
                  [
                      'text' => $prompt
                  ]
              ]
          ]
      ],
      'generationConfig' => [
          'temperature' => 0.2,
          'topK' => 40,
          'topP' => 0.95,
          'maxOutputTokens' => 1024,
      ]
  ];

  // cURLセッションの初期化
  $ch = curl_init($url);

  // cURLオプションの設定
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
  curl_setopt($ch, CURLOPT_POST, true);
  curl_setopt($ch, CURLOPT_HTTPHEADER, [
      'Content-Type: application/json'
  ]);
  curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($data));
  curl_setopt($ch, CURLOPT_TIMEOUT, 30);

  // APIリクエストの実行
  $response = curl_exec($ch);
  $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);
  $error = curl_error($ch);

  // cURLセッションの終了
  curl_close($ch);

  // エラーチェック
  if (!empty($error)) {
    return [
        'success' => false,
        'error' => 'API通信エラー: ' . $error
    ];
  }

  if ($httpCode != 200) {
    return [
        'success' => false,
        'error' => 'APIレスポンスエラー: HTTPコード ' . $httpCode
    ];
  }

  // レスポンスのデコード
  $result = json_decode($response, true);

  // レスポンス構造の確認
  if (!isset($result['candidates'][0]['content']['parts'][0]['text'])) {
    return [
        'success' => false,
        'error' => 'APIレスポンス形式エラー'
    ];
  }

  // 要約テキストの取得
  $summary = $result['candidates'][0]['content']['parts'][0]['text'];

  return [
      'success' => true,
      'summary' => $summary
  ];
}